/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

declare const _SWIG_enum_tag: unique symbol;

export  class TimeService {
}

export  class EventLoop extends TimeService {

  Start(): boolean;

  Stop(): boolean;

  constructor();
}

export  class MediaFrameListener {
}

export  class MediaFrameListenerShared {

  get(): MediaFrameListener;
}

export  class MediaFrameProducer {

  AddMediaListener(listener: MediaFrameListenerShared): void;

  RemoveMediaListener(listener: MediaFrameListenerShared): void;
}

export  class MediaFrameProducerShared {

  get(): MediaFrameProducer;
}

export type MediaFrameType = number & { readonly [_SWIG_enum_tag]: 'MediaFrameType'; };

export  class RTPIncomingMediaStream {

  GetMediaSSRC(): number;

  GetTimeService(): TimeService;

  Mute(muting: boolean): void;
}

export  class RTPIncomingMediaStreamShared {

  get(): RTPIncomingMediaStream;
}

export  class RTPReceiver {

  SendPLI(ssrc: number): number;

  Reset(ssrc: number): number;
}

export  class RTPReceiverShared {

  get(): RTPReceiver;
}

export  class FrameDispatchCoordinator {

  SetMaxDelayMs(maxDelayMs: number): void;

  constructor();
}

export  class FrameDispatchCoordinatorShared {

  constructor(aUpdateRefsPacketLateThresholdMs: number, aUpdateRefsStepPacketEarlyMs: number);

  constructor();

  get(): FrameDispatchCoordinator;
}

export  class MediaFrameListenerBridge extends RTPIncomingMediaStream {

  constructor(timeService: TimeService | EventLoop, ssrc: number);

  numFrames: number;

  numPackets: number;

  numFramesDelta: number;

  numPacketsDelta: number;

  totalBytes: number;

  bitrate: number;

  minWaitedTime: number;

  maxWaitedTime: number;

  avgWaitedTime: number;

  width: number;

  height: number;

  iframes: number;

  iframesDelta: number;

  bframes: number;

  bframesDelta: number;

  pframes: number;

  pframesDelta: number;

  Update(): void;

  Stop(): void;

  AddMediaListener(listener: MediaFrameListenerShared): void;

  RemoveMediaListener(listener: MediaFrameListenerShared): void;

  SetTargetBitrateHint(targetBitrateHint: number): void;

  SetFrameDispatchCoordinator(coordinator: FrameDispatchCoordinatorShared): void;

  SetMaxDelayMs(maxDelayMs: number): void;
}

export  class MediaFrameListenerBridgeShared {

  constructor(timeService: TimeService | EventLoop, ssrc: number);

  toRTPIncomingMediaStream(): RTPIncomingMediaStreamShared;

  toRTPReceiver(): RTPReceiverShared;

  toMediaFrameListener(): MediaFrameListenerShared;

  toMediaFrameProducer(): MediaFrameProducerShared;

  get(): MediaFrameListenerBridge;
}

export  class Properties {

  SetProperty(key: string, intval: number): void;

  SetProperty(key: string, val: string): void;

  SetProperty(key: string, boolval: boolean): void;

  SetProperty(key: string, floatval: number): void;

  SetIntegerProperty(key: string, intval: number): void;

  SetStringProperty(key: string, val: string): void;

  SetBooleanProperty(key: string, boolval: boolean): void;

  SetFloatProperty(key: string, floatval: number): void;

  constructor();
}

export  class VideoCodecsModule {

 static Initialize(): void;

 static Terminate(): void;

 static EnableWarning(flag: boolean): void;

 static EnableLog(flag: boolean): void;

 static EnableDebug(flag: boolean): void;

 static EnableUltraDebug(flag: boolean): void;
}

export  class VideoInput {
}

export  class VideoOutput {
}

export type VideoPipeAllowedDownScaling = number & { readonly [_SWIG_enum_tag]: 'VideoPipeAllowedDownScaling'; };

export  class VideoPipe extends VideoInput {

  Init(scaleResolutionDownBy: number, scaleResolutionToHeigth: number, allowedDownscaling: VideoPipeAllowedDownScaling): number;

  End(): number;

  SetMaxDelay(maxDelay: number): void;

  constructor();
}

export  class VideoEncoderStats {

  timestamp: number;

  totalEncodedFrames: number;

  fps: number;

  bitrate: number;

  maxEncodingTime: number;

  avgEncodingTime: number;

  maxCapturingTime: number;

  avgCapturingTime: number;

  constructor();
}

export  class VideoEncoderFacade extends RTPReceiver {

  constructor();

  Init(input: VideoInput | VideoPipe): number;

  AddListener(listener: MediaFrameListenerShared): boolean;

  RemoveListener(listener: MediaFrameListenerShared): boolean;

  SetVideoCodec(name: any, width: number, height: number, fps: number, bitrate: number, intraPeriod: number, properties: Properties): number;

  Start(): number;

  Stop(): number;

  End(): number;

  IsEncoding(): number;

  GetStats(): VideoEncoderStats;

  GetTimeService(): TimeService;
}

export  class VideoDecoderWorkerStats {

  timestamp: number;

  totalDecodedFrames: number;

  fps: number;

  maxDecodingTime: number;

  avgDecodingTime: number;

  maxWaitingFrameTime: number;

  avgWaitingFrameTime: number;

  maxDeinterlacingTime: number;

  avgDeinterlacingTime: number;

  constructor();
}

export  class VideoDecoderWorker extends MediaFrameListener {

  Start(): number;

  AddVideoOutput(ouput: VideoOutput | VideoPipe): void;

  RemoveVideoOutput(ouput: VideoOutput | VideoPipe): void;

  Stop(): number;

  GetStats(): VideoDecoderWorkerStats;

  constructor();
}

export  class VideoDecoderWorkerShared {

  constructor();

  toMediaFrameListener(): MediaFrameListenerShared;

  get(): VideoDecoderWorker;
}

export  class ThumbnailGeneratorTask {

  constructor(promise: any);

  Run(encoderName: string, decoderName: string, buffer: any): void;
}


